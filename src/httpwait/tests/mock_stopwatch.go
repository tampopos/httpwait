// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/stopwatch/stopwatch.go

// Package mock_stopwatch is a generated GoMock package.
package httpwaittest

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/tampopos/httpwait/src/stopwatch"
)

// MockStopwatch is a mock of Stopwatch interface
type MockStopwatch struct {
	ctrl     *gomock.Controller
	recorder *MockStopwatchMockRecorder
}

// MockStopwatchMockRecorder is the mock recorder for MockStopwatch
type MockStopwatchMockRecorder struct {
	mock *MockStopwatch
}

// NewMockStopwatch creates a new mock instance
func NewMockStopwatch(ctrl *gomock.Controller) *MockStopwatch {
	mock := &MockStopwatch{ctrl: ctrl}
	mock.recorder = &MockStopwatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopwatch) EXPECT() *MockStopwatchMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockStopwatch) Start() stopwatch.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(stopwatch.Stopwatch)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockStopwatchMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStopwatch)(nil).Start))
}

// Stop mocks base method
func (m *MockStopwatch) Stop() stopwatch.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(stopwatch.Stopwatch)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockStopwatchMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStopwatch)(nil).Stop))
}

// Reset mocks base method
func (m *MockStopwatch) Reset() stopwatch.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(stopwatch.Stopwatch)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockStopwatchMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockStopwatch)(nil).Reset))
}

// Restart mocks base method
func (m *MockStopwatch) Restart() stopwatch.Stopwatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart")
	ret0, _ := ret[0].(stopwatch.Stopwatch)
	return ret0
}

// Restart indicates an expected call of Restart
func (mr *MockStopwatchMockRecorder) Restart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockStopwatch)(nil).Restart))
}

// GetElapsedSeconds mocks base method
func (m *MockStopwatch) GetElapsedSeconds() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElapsedSeconds")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetElapsedSeconds indicates an expected call of GetElapsedSeconds
func (mr *MockStopwatchMockRecorder) GetElapsedSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElapsedSeconds", reflect.TypeOf((*MockStopwatch)(nil).GetElapsedSeconds))
}
